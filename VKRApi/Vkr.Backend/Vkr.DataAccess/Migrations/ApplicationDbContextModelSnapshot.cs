// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Vkr.DataAccess;

#nullable disable

namespace Vkr.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("TagId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTag", (string)null);

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            ProjectId = 1
                        },
                        new
                        {
                            TagId = 2,
                            ProjectId = 1
                        },
                        new
                        {
                            TagId = 3,
                            ProjectId = 2
                        },
                        new
                        {
                            TagId = 4,
                            ProjectId = 2
                        },
                        new
                        {
                            TagId = 5,
                            ProjectId = 3
                        },
                        new
                        {
                            TagId = 6,
                            ProjectId = 3
                        },
                        new
                        {
                            TagId = 7,
                            ProjectId = 4
                        },
                        new
                        {
                            TagId = 2,
                            ProjectId = 4
                        },
                        new
                        {
                            TagId = 8,
                            ProjectId = 5
                        },
                        new
                        {
                            TagId = 9,
                            ProjectId = 5
                        });
                });

            modelBuilder.Entity("TaskTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasKey("TagId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskTag", (string)null);

                    b.HasData(
                        new
                        {
                            TagId = 10,
                            TaskId = 1
                        },
                        new
                        {
                            TagId = 11,
                            TaskId = 1
                        },
                        new
                        {
                            TagId = 10,
                            TaskId = 2
                        },
                        new
                        {
                            TagId = 11,
                            TaskId = 2
                        },
                        new
                        {
                            TagId = 10,
                            TaskId = 3
                        },
                        new
                        {
                            TagId = 11,
                            TaskId = 3
                        },
                        new
                        {
                            TagId = 10,
                            TaskId = 4
                        },
                        new
                        {
                            TagId = 11,
                            TaskId = 4
                        },
                        new
                        {
                            TagId = 12,
                            TaskId = 5
                        },
                        new
                        {
                            TagId = 11,
                            TaskId = 5
                        },
                        new
                        {
                            TagId = 13,
                            TaskId = 6
                        },
                        new
                        {
                            TagId = 11,
                            TaskId = 6
                        },
                        new
                        {
                            TagId = 13,
                            TaskId = 7
                        },
                        new
                        {
                            TagId = 11,
                            TaskId = 7
                        },
                        new
                        {
                            TagId = 13,
                            TaskId = 8
                        },
                        new
                        {
                            TagId = 11,
                            TaskId = 8
                        },
                        new
                        {
                            TagId = 13,
                            TaskId = 9
                        },
                        new
                        {
                            TagId = 11,
                            TaskId = 9
                        },
                        new
                        {
                            TagId = 12,
                            TaskId = 10
                        },
                        new
                        {
                            TagId = 11,
                            TaskId = 10
                        },
                        new
                        {
                            TagId = 12,
                            TaskId = 11
                        },
                        new
                        {
                            TagId = 11,
                            TaskId = 11
                        },
                        new
                        {
                            TagId = 14,
                            TaskId = 12
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 12
                        },
                        new
                        {
                            TagId = 14,
                            TaskId = 13
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 13
                        },
                        new
                        {
                            TagId = 14,
                            TaskId = 14
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 14
                        },
                        new
                        {
                            TagId = 14,
                            TaskId = 15
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 15
                        },
                        new
                        {
                            TagId = 14,
                            TaskId = 16
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 16
                        },
                        new
                        {
                            TagId = 12,
                            TaskId = 17
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 17
                        },
                        new
                        {
                            TagId = 16,
                            TaskId = 18
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 18
                        },
                        new
                        {
                            TagId = 16,
                            TaskId = 19
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 19
                        },
                        new
                        {
                            TagId = 16,
                            TaskId = 20
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 20
                        },
                        new
                        {
                            TagId = 16,
                            TaskId = 21
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 21
                        },
                        new
                        {
                            TagId = 12,
                            TaskId = 22
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 22
                        },
                        new
                        {
                            TagId = 17,
                            TaskId = 23
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 23
                        },
                        new
                        {
                            TagId = 18,
                            TaskId = 24
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 24
                        },
                        new
                        {
                            TagId = 8,
                            TaskId = 25
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 25
                        },
                        new
                        {
                            TagId = 17,
                            TaskId = 26
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 26
                        },
                        new
                        {
                            TagId = 12,
                            TaskId = 27
                        },
                        new
                        {
                            TagId = 15,
                            TaskId = 27
                        });
                });

            modelBuilder.Entity("TaskTemplateTags", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskTemplateId")
                        .HasColumnType("integer");

                    b.HasKey("TagId", "TaskTemplateId");

                    b.HasIndex("TaskTemplateId");

                    b.ToTable("TaskTemplateTags", (string)null);

                    b.HasData(
                        new
                        {
                            TagId = 10,
                            TaskTemplateId = 1
                        },
                        new
                        {
                            TagId = 19,
                            TaskTemplateId = 1
                        },
                        new
                        {
                            TagId = 13,
                            TaskTemplateId = 2
                        },
                        new
                        {
                            TagId = 20,
                            TaskTemplateId = 2
                        },
                        new
                        {
                            TagId = 14,
                            TaskTemplateId = 3
                        },
                        new
                        {
                            TagId = 21,
                            TaskTemplateId = 3
                        },
                        new
                        {
                            TagId = 16,
                            TaskTemplateId = 4
                        },
                        new
                        {
                            TagId = 22,
                            TaskTemplateId = 4
                        },
                        new
                        {
                            TagId = 17,
                            TaskTemplateId = 5
                        },
                        new
                        {
                            TagId = 23,
                            TaskTemplateId = 5
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Board.BoardColumns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoardId", "Name")
                        .IsUnique();

                    b.ToTable("board_columns", (string)null);
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Board.BoardTask", b =>
                {
                    b.Property<int>("BoardId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<int?>("BoardColumnsId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomColumnName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("BoardId", "TaskId");

                    b.HasIndex("BoardColumnsId");

                    b.HasIndex("TaskId");

                    b.HasIndex("BoardId", "TaskId")
                        .IsUnique();

                    b.ToTable("board_tasks", (string)null);
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Board.Boards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Basis")
                        .HasColumnType("integer");

                    b.Property<int>("BoardTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("boards", (string)null);
                });

            modelBuilder.Entity("Vkr.Domain.Entities.CheckLists.Checklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Checklists");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.CheckLists.ChecklistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChecklistId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistId");

                    b.ToTable("ChecklistItems");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.ColorInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("colors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "#FF5733",
                            Name = "Vibrant orange"
                        },
                        new
                        {
                            Id = 2,
                            Code = "#32CD32",
                            Name = "Green"
                        },
                        new
                        {
                            Id = 3,
                            Code = "#3357FF",
                            Name = "Strong blue"
                        },
                        new
                        {
                            Id = 4,
                            Code = "#DC143C",
                            Name = "Pink-red"
                        },
                        new
                        {
                            Id = 5,
                            Code = "#00BFFF",
                            Name = "Teal-blue"
                        },
                        new
                        {
                            Id = 7,
                            Code = "#FFA500",
                            Name = "Dark orange"
                        },
                        new
                        {
                            Id = 8,
                            Code = "#8A2BE2",
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 9,
                            Code = "#228B22",
                            Name = "Dark green"
                        },
                        new
                        {
                            Id = 10,
                            Code = "#8B008B",
                            Name = "Dark purple-red"
                        },
                        new
                        {
                            Id = 11,
                            Code = "#FFD700",
                            Name = "Gold"
                        },
                        new
                        {
                            Id = 12,
                            Code = "#A0522D",
                            Name = "Brown"
                        },
                        new
                        {
                            Id = 13,
                            Code = "#ADD8E6",
                            Name = "Light blue"
                        },
                        new
                        {
                            Id = 14,
                            Code = "#808080",
                            Name = "Gray"
                        },
                        new
                        {
                            Id = 15,
                            Code = "#C0C0C0",
                            Name = "Light gray"
                        },
                        new
                        {
                            Id = 16,
                            Code = "#90EE90",
                            Name = "Medium Green"
                        },
                        new
                        {
                            Id = 17,
                            Code = "#FF69B4",
                            Name = "Pink-red"
                        },
                        new
                        {
                            Id = 18,
                            Code = "#FFA500",
                            Name = "Orange-red"
                        },
                        new
                        {
                            Id = 19,
                            Code = "#000080",
                            Name = "Dark blue"
                        },
                        new
                        {
                            Id = 20,
                            Code = "#008080",
                            Name = "Teal-Green"
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Files.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.History.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int>("RelatedEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedEntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RelatedEntityId");

                    b.HasIndex("RelatedEntityType");

                    b.ToTable("history", (string)null);
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Journal.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ChangedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityKey")
                        .HasColumnType("text");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Notification.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("RelatedEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedEntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RelatedEntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RelatedEntityId");

                    b.HasIndex("RelatedEntityType");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Notification.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<int>("EntityType")
                        .HasColumnType("integer");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId", "EntityId", "EntityType")
                        .IsUnique();

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Notification.WorkerNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("NotificationId", "WorkerId");

                    b.HasIndex("WorkerId", "NotificationId")
                        .IsUnique();

                    b.ToTable("worker_notifications", (string)null);
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Organization.Organizations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("organization", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Name = "Инновации",
                            OwnerId = 1
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.ProjectChecklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WorkerId");

                    b.ToTable("project_checklists", (string)null);
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.ProjectChecklistCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsChecked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("ProjectChecklistId")
                        .HasColumnType("integer");

                    b.Property<string>("Tittle")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectChecklistId");

                    b.ToTable("project_checklist_checks", (string)null);
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.ProjectLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("project_links", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Jira for tracking CRM project tasks and sprints.",
                            Link = "https://www.atlassian.com/software/jira",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Confluence for CRM project documentation and collaboration.",
                            Link = "https://www.confluence.com/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "GitHub repository for CRM project source code.",
                            Link = "https://github.com/example/crm-project",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Figma for designing CRM UI/UX prototypes.",
                            Link = "https://www.figma.com/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Swagger for documenting CRM API endpoints.",
                            Link = "https://swagger.io/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Entity Framework Core docs for CRM backend development.",
                            Link = "https://docs.microsoft.com/en-us/ef/core/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "React documentation for CRM frontend development.",
                            Link = "https://reactjs.org/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Postman for testing CRM API endpoints.",
                            Link = "https://www.postman.com/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Salesforce guide on CRM systems for reference.",
                            Link = "https://www.salesforce.com/products/what-is-crm/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Trello for managing CRM project tasks and workflows.",
                            Link = "https://www.trello.com/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Notion for CRM project notes and planning.",
                            Link = "https://www.notion.so/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Zoho CRM for inspiration and feature benchmarking.",
                            Link = "https://www.zoho.com/crm/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "GitLab for CI/CD pipeline setup for CRM project.",
                            Link = "https://www.gitlab.com/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Cypress for end-to-end testing of CRM frontend.",
                            Link = "https://www.cypress.io/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Jest for unit testing CRM frontend components.",
                            Link = "https://jestjs.io/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Auth0 for CRM authentication and user management.",
                            Link = "https://www.auth0.com/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Docker for containerizing CRM application services.",
                            Link = "https://www.docker.com/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "MongoDB Atlas for potential NoSQL integration in CRM.",
                            Link = "https://www.mongodb.com/docs/atlas/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Slack for CRM project team communication.",
                            Link = "https://www.slack.com/",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Pluralsight course on building CRM systems.",
                            Link = "https://www.pluralsight.com/courses/building-crm",
                            ProjectId = 1
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.ProjectMemberManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubordinateId");

                    b.HasIndex("WorkerId");

                    b.ToTable("project_member_managements", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProjectId = 1,
                            SubordinateId = 2,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProjectId = 1,
                            SubordinateId = 9,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 3,
                            ProjectId = 2,
                            SubordinateId = 13,
                            WorkerId = 3
                        },
                        new
                        {
                            Id = 4,
                            ProjectId = 3,
                            SubordinateId = 16,
                            WorkerId = 4
                        },
                        new
                        {
                            Id = 5,
                            ProjectId = 3,
                            SubordinateId = 17,
                            WorkerId = 4
                        },
                        new
                        {
                            Id = 6,
                            ProjectId = 4,
                            SubordinateId = 6,
                            WorkerId = 5
                        },
                        new
                        {
                            Id = 7,
                            ProjectId = 5,
                            SubordinateId = 10,
                            WorkerId = 7
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RelatedColorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RelatedColorId");

                    b.ToTable("project_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Инициализируется",
                            RelatedColorId = 15
                        },
                        new
                        {
                            Id = 2,
                            Name = "В работе",
                            RelatedColorId = 20
                        },
                        new
                        {
                            Id = 3,
                            Name = "На проверке",
                            RelatedColorId = 11
                        },
                        new
                        {
                            Id = 4,
                            Name = "Завершен",
                            RelatedColorId = 14
                        },
                        new
                        {
                            Id = 5,
                            Name = "В архиве",
                            RelatedColorId = 14
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.Projects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Goal")
                        .HasColumnType("text");

                    b.Property<int>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectStatusId");

                    b.ToTable("project", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Создание CRM-системы для управления клиентами и продажами.",
                            ManagerId = 1,
                            Name = "Разработка CRM-системы",
                            OrganizationId = 1,
                            Progress = 10,
                            ProjectStatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Разработка мобильного приложения для службы доставки еды.",
                            ManagerId = 3,
                            Name = "Мобильное приложение для доставки",
                            OrganizationId = 1,
                            Progress = 20,
                            ProjectStatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Внедрение системы автоматизации учета на складе.",
                            ManagerId = 4,
                            Name = "Автоматизация складского учета",
                            OrganizationId = 1,
                            Progress = 30,
                            ProjectStatusId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Создание внутреннего портала для сотрудников компании.",
                            ManagerId = 5,
                            Name = "Корпоративный портал",
                            OrganizationId = 1,
                            Progress = 15,
                            ProjectStatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Планирование и запуск маркетинговой кампании для нового продукта.",
                            ManagerId = 7,
                            Name = "Маркетинговая кампания",
                            OrganizationId = 1,
                            Progress = 5,
                            ProjectStatusId = 3
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Sprint.SprintStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("sprint_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#ffd666",
                            Name = "PLANNED"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#95de64",
                            Name = "ACTIVE"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#69b1ff",
                            Name = "FINISHED"
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Sprint.Sprints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("ExpireOn")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Goal")
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("SprintStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartsOn")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SprintStatusId");

                    b.HasIndex("Title");

                    b.ToTable("sprints", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            ExpireOn = new DateTime(2025, 6, 3, 23, 59, 59, 0, DateTimeKind.Utc),
                            Goal = "Initial setup and core features",
                            ProjectId = 1,
                            SprintStatusId = 1,
                            StartsOn = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Sprint 1 - CRM"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            ExpireOn = new DateTime(2025, 6, 18, 23, 59, 59, 0, DateTimeKind.Utc),
                            Goal = "User authentication and dashboard",
                            ProjectId = 1,
                            SprintStatusId = 1,
                            StartsOn = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Sprint 2 - CRM"
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#E5E7EB",
                            Name = "CRM"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#A7F3D0",
                            Name = "WebApp"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#BFDBFE",
                            Name = "MobileApp"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#FDE68A",
                            Name = "Delivery"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#DDD6FE",
                            Name = "Automation"
                        },
                        new
                        {
                            Id = 6,
                            Color = "#D1D5DB",
                            Name = "Warehouse"
                        },
                        new
                        {
                            Id = 7,
                            Color = "#FBCFE8",
                            Name = "Portal"
                        },
                        new
                        {
                            Id = 8,
                            Color = "#99F6E4",
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = 9,
                            Color = "#F5D0FE",
                            Name = "Campaign"
                        },
                        new
                        {
                            Id = 10,
                            Color = "#E2E8F0",
                            Name = "Analysis"
                        },
                        new
                        {
                            Id = 11,
                            Color = "#BAE6FD",
                            Name = "Sprint1"
                        },
                        new
                        {
                            Id = 12,
                            Color = "#F9A8D4",
                            Name = "Milestone"
                        },
                        new
                        {
                            Id = 13,
                            Color = "#C7D2FE",
                            Name = "Design"
                        },
                        new
                        {
                            Id = 14,
                            Color = "#BBF7D0",
                            Name = "Development"
                        },
                        new
                        {
                            Id = 15,
                            Color = "#A5F3FC",
                            Name = "Sprint2"
                        },
                        new
                        {
                            Id = 16,
                            Color = "#FED7AA",
                            Name = "Testing"
                        },
                        new
                        {
                            Id = 17,
                            Color = "#D4D4D8",
                            Name = "Deployment"
                        },
                        new
                        {
                            Id = 18,
                            Color = "#CCFBF1",
                            Name = "Documentation"
                        },
                        new
                        {
                            Id = 19,
                            Color = "#CFFAFE",
                            Name = "Requirements"
                        },
                        new
                        {
                            Id = 20,
                            Color = "#FECACA",
                            Name = "UI/UX"
                        },
                        new
                        {
                            Id = 21,
                            Color = "#FEF3C7",
                            Name = "API"
                        },
                        new
                        {
                            Id = 22,
                            Color = "#EDE9FE",
                            Name = "QA"
                        },
                        new
                        {
                            Id = 23,
                            Color = "#FECDD3",
                            Name = "Release"
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskExecutor", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsResponsible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("TaskId", "WorkerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("task_executors", (string)null);

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            WorkerId = 1,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 2,
                            WorkerId = 1,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 4,
                            WorkerId = 1,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 5,
                            WorkerId = 1,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 11,
                            WorkerId = 1,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 3,
                            WorkerId = 2,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 2,
                            WorkerId = 2,
                            IsResponsible = false
                        },
                        new
                        {
                            TaskId = 4,
                            WorkerId = 2,
                            IsResponsible = false
                        },
                        new
                        {
                            TaskId = 6,
                            WorkerId = 9,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 7,
                            WorkerId = 9,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 8,
                            WorkerId = 9,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 9,
                            WorkerId = 9,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 10,
                            WorkerId = 9,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 12,
                            WorkerId = 1,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 17,
                            WorkerId = 1,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 22,
                            WorkerId = 1,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 23,
                            WorkerId = 1,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 27,
                            WorkerId = 1,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 18,
                            WorkerId = 2,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 19,
                            WorkerId = 2,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 20,
                            WorkerId = 2,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 21,
                            WorkerId = 2,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 13,
                            WorkerId = 11,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 14,
                            WorkerId = 11,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 16,
                            WorkerId = 11,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 15,
                            WorkerId = 11,
                            IsResponsible = false
                        },
                        new
                        {
                            TaskId = 26,
                            WorkerId = 11,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 15,
                            WorkerId = 12,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 24,
                            WorkerId = 12,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 25,
                            WorkerId = 12,
                            IsResponsible = true
                        },
                        new
                        {
                            TaskId = 19,
                            WorkerId = 12,
                            IsResponsible = false
                        },
                        new
                        {
                            TaskId = 20,
                            WorkerId = 12,
                            IsResponsible = false
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("task_links", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "PostgreSQL documentation on DDL for designing database schemas.",
                            Link = "https://www.postgresql.org/docs/current/ddl.html",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Online tool for creating ER diagrams for CRM database schema.",
                            Link = "https://dbdesigner.net/",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Lucidchart guide for creating entity-relationship diagrams.",
                            Link = "https://www.lucidchart.com/pages/er-diagrams",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Article on database normalization techniques for schema design.",
                            Link = "https://www.sqlshack.com/learn-sql-database-normalization/",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "GitHub repository with sample CRM database schema scripts.",
                            Link = "https://github.com/example/crm-schema",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Vertabelo tool for designing and visualizing database schemas.",
                            Link = "https://www.vertabelo.com/",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "MySQL Workbench for designing and managing database schemas.",
                            Link = "https://www.mysql.com/products/workbench/",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Tutorial on SQL indexes for optimizing database performance.",
                            Link = "https://www.tutorialspoint.com/sql/sql-indexes.htm",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Guide on SQL joins for designing relational schemas.",
                            Link = "https://www.dofactory.com/sql/joins",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "DBML language for defining database schemas in code.",
                            Link = "https://www.dbml.org/",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Blog on best practices for database schema design.",
                            Link = "https://www.learnsql.com/blog/database-design/",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "pgAdmin tool for managing PostgreSQL database schemas.",
                            Link = "https://www.pgadmin.org/",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "SQL style guide for consistent schema naming conventions.",
                            Link = "https://www.sqlstyle.guide/",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "DataCamp course on database design fundamentals.",
                            Link = "https://www.datacamp.com/courses/database-design",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Draw.io for creating ER diagrams for CRM schema.",
                            Link = "https://www.draw.io/",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Article on database design principles for relational databases.",
                            Link = "https://www.sqlservercentral.com/articles/database-design",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Redgate SQL Toolbelt for schema management and comparison.",
                            Link = "https://www.red-gate.com/products/sql-toolbelt/",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "SQLite tutorial on constraints for schema integrity.",
                            Link = "https://www.sqlitetutorial.net/sqlite-constraints/",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "MongoDB data modeling guide for hybrid schema design.",
                            Link = "https://www.mongodb.com/docs/manual/core/data-modeling/",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Pluralsight course on designing efficient database schemas.",
                            Link = "https://www.pluralsight.com/courses/database-design",
                            TaskId = 1
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("RelatedTaskId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RelatedTaskId");

                    b.HasIndex("SenderId");

                    b.ToTable("task_messages", (string)null);
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskObserver", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AssignedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("TaskId", "WorkerId");

                    b.HasIndex("AssignedOn");

                    b.HasIndex("WorkerId");

                    b.ToTable("task_observers", (string)null);
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("task_priority", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "blue",
                            Name = "Низкий"
                        },
                        new
                        {
                            Id = 2,
                            Color = "blue",
                            Name = "Обычный"
                        },
                        new
                        {
                            Id = 3,
                            Color = "blue",
                            Name = "Высокий"
                        },
                        new
                        {
                            Id = 4,
                            Color = "blue",
                            Name = "Критичный"
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RelatedTaskId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskRelationshipTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RelatedTaskId");

                    b.HasIndex("TaskRelationshipTypeId");

                    b.HasIndex("TaskId", "RelatedTaskId");

                    b.ToTable("task_relationships", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RelatedTaskId = 2,
                            TaskId = 1,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 2,
                            RelatedTaskId = 3,
                            TaskId = 1,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 3,
                            RelatedTaskId = 4,
                            TaskId = 1,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 4,
                            RelatedTaskId = 5,
                            TaskId = 1,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 5,
                            RelatedTaskId = 7,
                            TaskId = 6,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 6,
                            RelatedTaskId = 8,
                            TaskId = 6,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 7,
                            RelatedTaskId = 9,
                            TaskId = 6,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 8,
                            RelatedTaskId = 10,
                            TaskId = 6,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 9,
                            RelatedTaskId = 13,
                            TaskId = 12,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 10,
                            RelatedTaskId = 14,
                            TaskId = 12,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 11,
                            RelatedTaskId = 15,
                            TaskId = 12,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 12,
                            RelatedTaskId = 16,
                            TaskId = 12,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 13,
                            RelatedTaskId = 17,
                            TaskId = 12,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 14,
                            RelatedTaskId = 19,
                            TaskId = 18,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 15,
                            RelatedTaskId = 20,
                            TaskId = 18,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 16,
                            RelatedTaskId = 21,
                            TaskId = 18,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 17,
                            RelatedTaskId = 22,
                            TaskId = 18,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 18,
                            RelatedTaskId = 24,
                            TaskId = 23,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 19,
                            RelatedTaskId = 25,
                            TaskId = 23,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 20,
                            RelatedTaskId = 26,
                            TaskId = 23,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 21,
                            RelatedTaskId = 27,
                            TaskId = 23,
                            TaskRelationshipTypeId = 5
                        },
                        new
                        {
                            Id = 22,
                            RelatedTaskId = 2,
                            TaskId = 3,
                            TaskRelationshipTypeId = 3
                        },
                        new
                        {
                            Id = 23,
                            RelatedTaskId = 2,
                            TaskId = 4,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 24,
                            RelatedTaskId = 4,
                            TaskId = 5,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 25,
                            RelatedTaskId = 5,
                            TaskId = 6,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 26,
                            RelatedTaskId = 5,
                            TaskId = 7,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 27,
                            RelatedTaskId = 5,
                            TaskId = 8,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 28,
                            RelatedTaskId = 7,
                            TaskId = 9,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 29,
                            RelatedTaskId = 9,
                            TaskId = 10,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 30,
                            RelatedTaskId = 10,
                            TaskId = 11,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 31,
                            RelatedTaskId = 11,
                            TaskId = 12,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 32,
                            RelatedTaskId = 11,
                            TaskId = 13,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 33,
                            RelatedTaskId = 13,
                            TaskId = 14,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 34,
                            RelatedTaskId = 14,
                            TaskId = 15,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 35,
                            RelatedTaskId = 14,
                            TaskId = 16,
                            TaskRelationshipTypeId = 3
                        },
                        new
                        {
                            Id = 36,
                            RelatedTaskId = 15,
                            TaskId = 17,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 37,
                            RelatedTaskId = 16,
                            TaskId = 17,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 38,
                            RelatedTaskId = 17,
                            TaskId = 18,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 39,
                            RelatedTaskId = 17,
                            TaskId = 19,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 40,
                            RelatedTaskId = 19,
                            TaskId = 20,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 41,
                            RelatedTaskId = 20,
                            TaskId = 21,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 42,
                            RelatedTaskId = 21,
                            TaskId = 22,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 43,
                            RelatedTaskId = 22,
                            TaskId = 23,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 44,
                            RelatedTaskId = 22,
                            TaskId = 24,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 45,
                            RelatedTaskId = 22,
                            TaskId = 25,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 46,
                            RelatedTaskId = 24,
                            TaskId = 26,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 47,
                            RelatedTaskId = 26,
                            TaskId = 27,
                            TaskRelationshipTypeId = 1
                        },
                        new
                        {
                            Id = 48,
                            RelatedTaskId = 25,
                            TaskId = 27,
                            TaskRelationshipTypeId = 1
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskRelationshipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("task_relationship_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Финиш-Старт"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Финиш-Финиш"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Старт-Старт"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Старт-Финиш"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Подзадача"
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("task_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "blue",
                            Name = "В ожидании"
                        },
                        new
                        {
                            Id = 2,
                            Color = "blue",
                            Name = "В работе"
                        },
                        new
                        {
                            Id = 3,
                            Color = "blue",
                            Name = "На проверке"
                        },
                        new
                        {
                            Id = 4,
                            Color = "blue",
                            Name = "Завершена"
                        },
                        new
                        {
                            Id = 5,
                            Color = "blue",
                            Name = "Приостановлен"
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskTemplateLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TaskTemplateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskTemplateId");

                    b.ToTable("taskTemplate_links", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Ссылка на документ с требованиями для анализа.",
                            Link = "https://docs.example.com/requirements",
                            TaskTemplateId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Description = "Инструмент для совместной работы над требованиями.",
                            Link = "https://collaboration.example.com/requirements-tool",
                            TaskTemplateId = 1
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedOn")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Progress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StoryPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("TaskName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TaskPriorityId")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("TaskPriorityId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("TaskTemplates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Сбор и анализ требований для проекта.",
                            StoryPoints = 8,
                            TaskName = "Анализ требований",
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 3,
                            TemplateName = "Requirement Analysis Template"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Создание UI/UX дизайна для приложения.",
                            StoryPoints = 13,
                            TaskName = "Дизайн интерфейса",
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 3,
                            TemplateName = "UI Design Template"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Создание REST API для приложения.",
                            StoryPoints = 5,
                            TaskName = "Разработка API",
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 1,
                            TemplateName = "API Development Template"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Проведение тестирования приложения (unit, интеграционное, нагрузочное).",
                            StoryPoints = 8,
                            TaskName = "Тестирование",
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 3,
                            TemplateName = "Testing Template"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Подготовка и выпуск приложения в продакшен.",
                            StoryPoints = 3,
                            TaskName = "Развертывание",
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 3,
                            TemplateName = "Deployment Template"
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("task_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Задача"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Веха"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Сводная задача"
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ExpireOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("integer");

                    b.Property<int>("Progress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SprintId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StoryPoints")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskPriorityId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ExpireOn");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ShortName");

                    b.HasIndex("SprintId");

                    b.HasIndex("TaskPriorityId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("tasks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 1,
                            Description = "Сбор и анализ требований для CRM",
                            ExpireOn = new DateTime(2025, 5, 15, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Анализ требований",
                            SprintId = 1,
                            StartOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 1,
                            Description = "Интервью с заказчиком",
                            ExpireOn = new DateTime(2025, 5, 5, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Сбор требований",
                            SprintId = 1,
                            StartOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 2,
                            Description = "Изучение аналогичных CRM систем",
                            ExpireOn = new DateTime(2025, 5, 7, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Анализ конкурентов",
                            SprintId = 1,
                            StartOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 1,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 1,
                            Description = "Написание технического задания",
                            ExpireOn = new DateTime(2025, 5, 12, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Составление ТЗ",
                            SprintId = 1,
                            StartOn = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 1,
                            Description = "Подтверждение ТЗ заказчиком",
                            ExpireOn = new DateTime(2025, 5, 13, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Утверждение ТЗ",
                            SprintId = 1,
                            StartOn = new DateTime(2025, 5, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 3,
                            TaskStatusId = 1,
                            TaskTypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 9,
                            Description = "Создание UI/UX дизайна CRM",
                            ExpireOn = new DateTime(2025, 5, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Дизайн приложения",
                            SprintId = 1,
                            StartOn = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 9,
                            Description = "Создание прототипов интерфейса",
                            ExpireOn = new DateTime(2025, 5, 20, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Прототипирование UI",
                            SprintId = 1,
                            StartOn = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 9,
                            Description = "Разработка логотипа CRM",
                            ExpireOn = new DateTime(2025, 5, 18, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Дизайн логотипа",
                            SprintId = 1,
                            StartOn = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 1,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 9,
                            Description = "Окончательный дизайн интерфейса",
                            ExpireOn = new DateTime(2025, 5, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Финальный дизайн UI",
                            SprintId = 1,
                            StartOn = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 9,
                            Description = "Подтверждение дизайна заказчиком",
                            ExpireOn = new DateTime(2025, 5, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Утверждение дизайна",
                            SprintId = 1,
                            StartOn = new DateTime(2025, 5, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 3,
                            TaskStatusId = 1,
                            TaskTypeId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 1,
                            Description = "Complete Sprint 1 deliverables",
                            ExpireOn = new DateTime(2025, 5, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Sprint 1 Completion",
                            SprintId = 1,
                            StartOn = new DateTime(2025, 5, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 3,
                            TaskStatusId = 1,
                            TaskTypeId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 1,
                            Description = "Кодинг основного функционала CRM",
                            ExpireOn = new DateTime(2025, 7, 15, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Разработка приложения",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 3
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 11,
                            Description = "Подготовка dev-окружения",
                            ExpireOn = new DateTime(2025, 6, 5, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Настройка окружения",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 1,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 11,
                            Description = "Создание REST API для CRM",
                            ExpireOn = new DateTime(2025, 6, 20, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Разработка API",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 6, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 12,
                            Description = "Подключение UI к API",
                            ExpireOn = new DateTime(2025, 7, 5, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Интеграция фронтенда",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 6, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 11,
                            Description = "Настройка логина и регистрации",
                            ExpireOn = new DateTime(2025, 6, 25, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Реализация авторизации",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 6, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 1,
                            Description = "Готовность базового функционала",
                            ExpireOn = new DateTime(2025, 7, 5, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Завершение разработки",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 3,
                            TaskStatusId = 1,
                            TaskTypeId = 2
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 2,
                            Description = "Проверка качества CRM",
                            ExpireOn = new DateTime(2025, 7, 20, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Тестирование приложения",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 7, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 3
                        },
                        new
                        {
                            Id = 19,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 2,
                            Description = "Написание модульных тестов",
                            ExpireOn = new DateTime(2025, 7, 12, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Unit-тесты",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 7, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 1,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 2,
                            Description = "Тестирование интеграции модулей",
                            ExpireOn = new DateTime(2025, 7, 18, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Интеграционное тестирование",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 7, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 21,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 2,
                            Description = "Проверка производительности",
                            ExpireOn = new DateTime(2025, 7, 23, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Нагрузочное тестирование",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 22,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 1,
                            Description = "Выпуск бета-версии CRM",
                            ExpireOn = new DateTime(2025, 7, 24, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Релиз бета-версии",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 3,
                            TaskStatusId = 1,
                            TaskTypeId = 2
                        },
                        new
                        {
                            Id = 23,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 1,
                            Description = "Подготовка и выпуск финальной версии",
                            ExpireOn = new DateTime(2025, 7, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Запуск приложения",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 3
                        },
                        new
                        {
                            Id = 24,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 12,
                            Description = "Создание пользовательской документации",
                            ExpireOn = new DateTime(2025, 7, 29, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Подготовка документации",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 1,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 25,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 9,
                            Description = "Запуск рекламы CRM",
                            ExpireOn = new DateTime(2025, 7, 30, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Маркетинговая кампания",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 26,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 11,
                            Description = "Размещение CRM в продакшен",
                            ExpireOn = new DateTime(2025, 7, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Публикация CRM",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 7, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 2,
                            TaskStatusId = 1,
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 27,
                            CreatedOn = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = 1,
                            Description = "Выпуск финальной версии CRM",
                            ExpireOn = new DateTime(2025, 7, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            Progress = 0,
                            ProjectId = 1,
                            ShortName = "Официальный релиз",
                            SprintId = 2,
                            StartOn = new DateTime(2025, 7, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            TaskPriorityId = 3,
                            TaskStatusId = 1,
                            TaskTypeId = 2
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.TaskFilter", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OptionsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Name");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("task_filters", (string)null);
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Worker.WorkerPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("worker_positions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Junior Developer"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Mid-Level Developer"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Senior Developer"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Team Lead"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Project Manager"
                        },
                        new
                        {
                            Id = 6,
                            Title = "Product Owner"
                        },
                        new
                        {
                            Id = 7,
                            Title = "Scrum Master"
                        },
                        new
                        {
                            Id = 8,
                            Title = "QA Engineer"
                        },
                        new
                        {
                            Id = 9,
                            Title = "DevOps Engineer"
                        },
                        new
                        {
                            Id = 10,
                            Title = "System Architect"
                        },
                        new
                        {
                            Id = 11,
                            Title = "UI/UX Designer"
                        },
                        new
                        {
                            Id = 12,
                            Title = "Business Analyst"
                        },
                        new
                        {
                            Id = 13,
                            Title = "Data Scientist"
                        },
                        new
                        {
                            Id = 14,
                            Title = "Database Administrator"
                        },
                        new
                        {
                            Id = 15,
                            Title = "Security Specialist"
                        },
                        new
                        {
                            Id = 16,
                            Title = "Technical Writer"
                        },
                        new
                        {
                            Id = 17,
                            Title = "Support Engineer"
                        },
                        new
                        {
                            Id = 18,
                            Title = "Marketing Specialist"
                        },
                        new
                        {
                            Id = 19,
                            Title = "HR Manager"
                        },
                        new
                        {
                            Id = 20,
                            Title = "Finance Analyst"
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Worker.WorkerPositionRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SubordinateWorkerPositionId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkerPositionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubordinateWorkerPositionId");

                    b.HasIndex("WorkerPositionId");

                    b.ToTable("worker_position_relations", (string)null);
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Worker.Workers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanManageProjects")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanManageWorkers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("OrganizationsId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(84)
                        .HasColumnType("character varying(84)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ThirdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("WorkerPositionId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkerStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationsId");

                    b.HasIndex("WorkerPositionId");

                    b.ToTable("workers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanManageProjects = true,
                            CanManageWorkers = true,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "ivan.petrov@example.com",
                            Name = "Иван",
                            NormalizedEmail = "IVAN.PETROV@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Петров",
                            ThirdName = "Александрович",
                            WorkerPositionId = 1,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 2,
                            CanManageProjects = false,
                            CanManageWorkers = false,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "anna.smirnova@example.com",
                            Name = "Анна",
                            NormalizedEmail = "ANNA.SMIRNOVA@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Смирнова",
                            ThirdName = "Сергеевна",
                            WorkerPositionId = 2,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 3,
                            CanManageProjects = true,
                            CanManageWorkers = true,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "mikhail.ivanov@example.com",
                            Name = "Михаил",
                            NormalizedEmail = "MIKHAIL.IVANOV@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Иванов",
                            ThirdName = "Владимирович",
                            WorkerPositionId = 3,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 4,
                            CanManageProjects = true,
                            CanManageWorkers = true,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "ekaterina.kozlova@example.com",
                            Name = "Екатерина",
                            NormalizedEmail = "EKATERINA.KOZLOVA@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Козлова",
                            ThirdName = "Дмитриевна",
                            WorkerPositionId = 4,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 5,
                            CanManageProjects = true,
                            CanManageWorkers = true,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "alexandr.sokolov@example.com",
                            Name = "Александр",
                            NormalizedEmail = "ALEXANDR.SOKOLOV@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Соколов",
                            ThirdName = "Игоревич",
                            WorkerPositionId = 5,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 6,
                            CanManageProjects = true,
                            CanManageWorkers = false,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "olga.novikova@example.com",
                            Name = "Ольга",
                            NormalizedEmail = "OLGA.NOVIKOVA@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Новикова",
                            ThirdName = "Павловна",
                            WorkerPositionId = 6,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 7,
                            CanManageProjects = true,
                            CanManageWorkers = true,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "dmitry.morozov@example.com",
                            Name = "Дмитрий",
                            NormalizedEmail = "DMITRY.MOROZOV@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Морозов",
                            ThirdName = "Алексеевич",
                            WorkerPositionId = 7,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 8,
                            CanManageProjects = true,
                            CanManageWorkers = true,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "elena.popova@example.com",
                            Name = "Елена",
                            NormalizedEmail = "ELENA.POPOVA@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Попова",
                            ThirdName = "Николаевна",
                            WorkerPositionId = 8,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 9,
                            CanManageProjects = false,
                            CanManageWorkers = false,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "sergey.fedorov@example.com",
                            Name = "Сергей",
                            NormalizedEmail = "SERGEY.FEDOROV@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Федоров",
                            ThirdName = "Михайлович",
                            WorkerPositionId = 9,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 10,
                            CanManageProjects = true,
                            CanManageWorkers = true,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "natalya.kuznetsova@example.com",
                            Name = "Наталья",
                            NormalizedEmail = "NATALYA.KUZNETSOVA@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Кузнецова",
                            ThirdName = "Викторовна",
                            WorkerPositionId = 10,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 11,
                            CanManageProjects = false,
                            CanManageWorkers = false,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "andrey.vorobiev@example.com",
                            Name = "Андрей",
                            NormalizedEmail = "ANDREY.VOROBIEV@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Воробьев",
                            ThirdName = "Петрович",
                            WorkerPositionId = 11,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 12,
                            CanManageProjects = false,
                            CanManageWorkers = false,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "yuliya.grigorieva@example.com",
                            Name = "Юлия",
                            NormalizedEmail = "YULIYA.GRIGORIEVA@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Григорьева",
                            ThirdName = "Андреевна",
                            WorkerPositionId = 12,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 13,
                            CanManageProjects = false,
                            CanManageWorkers = false,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "pavel.sidorov@example.com",
                            Name = "Павел",
                            NormalizedEmail = "PAVEL.SIDOROV@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Сидоров",
                            ThirdName = "Евгеньевич",
                            WorkerPositionId = 13,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 14,
                            CanManageProjects = false,
                            CanManageWorkers = false,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "tatiana.lebedeva@example.com",
                            Name = "Татьяна",
                            NormalizedEmail = "TATIANA.LEBEDEVA@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Лебедева",
                            ThirdName = "Игоревна",
                            WorkerPositionId = 14,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 15,
                            CanManageProjects = false,
                            CanManageWorkers = false,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "viktor.belov@example.com",
                            Name = "Виктор",
                            NormalizedEmail = "VIKTOR.BELOV@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Белов",
                            ThirdName = "Анатольевич",
                            WorkerPositionId = 15,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 16,
                            CanManageProjects = false,
                            CanManageWorkers = false,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "maria.orlova@example.com",
                            Name = "Мария",
                            NormalizedEmail = "MARIA.ORLOVA@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Орлова",
                            ThirdName = "Владимировна",
                            WorkerPositionId = 16,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 17,
                            CanManageProjects = false,
                            CanManageWorkers = false,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "roman.zaytsev@example.com",
                            Name = "Роман",
                            NormalizedEmail = "ROMAN.ZAYTSEV@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Зайцев",
                            ThirdName = "Сергеевич",
                            WorkerPositionId = 17,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 18,
                            CanManageProjects = false,
                            CanManageWorkers = false,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "svetlana.egorova@example.com",
                            Name = "Светлана",
                            NormalizedEmail = "SVETLANA.EGOROVA@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Егорова",
                            ThirdName = "Михайловна",
                            WorkerPositionId = 18,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 19,
                            CanManageProjects = false,
                            CanManageWorkers = true,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "vladimir.krylov@example.com",
                            Name = "Владимир",
                            NormalizedEmail = "VLADIMIR.KRYLOV@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Крылов",
                            ThirdName = "Дмитриевич",
                            WorkerPositionId = 19,
                            WorkerStatus = 0
                        },
                        new
                        {
                            Id = 20,
                            CanManageProjects = false,
                            CanManageWorkers = false,
                            CreatedOn = new DateTime(2025, 5, 19, 12, 27, 0, 0, DateTimeKind.Utc),
                            Email = "kseniya.vasilyeva@example.com",
                            Name = "Ксения",
                            NormalizedEmail = "KSENIYA.VASILYEVA@EXAMPLE.COM",
                            PasswordHash = "$2a$11$H9AgqJyZjbH6RAT46DTNQOyawjOXMVZoLyvI3bPxnnDwU/57ynpAi",
                            SecondName = "Васильева",
                            ThirdName = "Егоровна",
                            WorkerPositionId = 20,
                            WorkerStatus = 0
                        });
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Worker.WorkersManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("workers_management", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ManagerId = 1,
                            SubordinateId = 2
                        },
                        new
                        {
                            Id = 2,
                            ManagerId = 1,
                            SubordinateId = 9
                        },
                        new
                        {
                            Id = 3,
                            ManagerId = 1,
                            SubordinateId = 11
                        },
                        new
                        {
                            Id = 4,
                            ManagerId = 1,
                            SubordinateId = 12
                        },
                        new
                        {
                            Id = 5,
                            ManagerId = 1,
                            SubordinateId = 13
                        },
                        new
                        {
                            Id = 6,
                            ManagerId = 1,
                            SubordinateId = 14
                        },
                        new
                        {
                            Id = 7,
                            ManagerId = 1,
                            SubordinateId = 15
                        },
                        new
                        {
                            Id = 8,
                            ManagerId = 1,
                            SubordinateId = 16
                        },
                        new
                        {
                            Id = 9,
                            ManagerId = 1,
                            SubordinateId = 17
                        },
                        new
                        {
                            Id = 10,
                            ManagerId = 1,
                            SubordinateId = 18
                        },
                        new
                        {
                            Id = 11,
                            ManagerId = 1,
                            SubordinateId = 20
                        },
                        new
                        {
                            Id = 12,
                            ManagerId = 3,
                            SubordinateId = 2
                        },
                        new
                        {
                            Id = 13,
                            ManagerId = 3,
                            SubordinateId = 9
                        },
                        new
                        {
                            Id = 14,
                            ManagerId = 3,
                            SubordinateId = 11
                        },
                        new
                        {
                            Id = 15,
                            ManagerId = 3,
                            SubordinateId = 12
                        },
                        new
                        {
                            Id = 16,
                            ManagerId = 3,
                            SubordinateId = 13
                        },
                        new
                        {
                            Id = 17,
                            ManagerId = 3,
                            SubordinateId = 14
                        },
                        new
                        {
                            Id = 18,
                            ManagerId = 3,
                            SubordinateId = 15
                        },
                        new
                        {
                            Id = 19,
                            ManagerId = 3,
                            SubordinateId = 16
                        },
                        new
                        {
                            Id = 20,
                            ManagerId = 3,
                            SubordinateId = 17
                        },
                        new
                        {
                            Id = 21,
                            ManagerId = 3,
                            SubordinateId = 18
                        },
                        new
                        {
                            Id = 22,
                            ManagerId = 3,
                            SubordinateId = 20
                        },
                        new
                        {
                            Id = 23,
                            ManagerId = 4,
                            SubordinateId = 2
                        },
                        new
                        {
                            Id = 24,
                            ManagerId = 4,
                            SubordinateId = 9
                        },
                        new
                        {
                            Id = 25,
                            ManagerId = 4,
                            SubordinateId = 11
                        },
                        new
                        {
                            Id = 26,
                            ManagerId = 4,
                            SubordinateId = 12
                        },
                        new
                        {
                            Id = 27,
                            ManagerId = 4,
                            SubordinateId = 13
                        },
                        new
                        {
                            Id = 28,
                            ManagerId = 4,
                            SubordinateId = 14
                        },
                        new
                        {
                            Id = 29,
                            ManagerId = 4,
                            SubordinateId = 15
                        },
                        new
                        {
                            Id = 30,
                            ManagerId = 4,
                            SubordinateId = 16
                        },
                        new
                        {
                            Id = 31,
                            ManagerId = 4,
                            SubordinateId = 17
                        },
                        new
                        {
                            Id = 32,
                            ManagerId = 4,
                            SubordinateId = 18
                        },
                        new
                        {
                            Id = 33,
                            ManagerId = 4,
                            SubordinateId = 20
                        },
                        new
                        {
                            Id = 34,
                            ManagerId = 5,
                            SubordinateId = 2
                        },
                        new
                        {
                            Id = 35,
                            ManagerId = 5,
                            SubordinateId = 9
                        },
                        new
                        {
                            Id = 36,
                            ManagerId = 5,
                            SubordinateId = 11
                        },
                        new
                        {
                            Id = 37,
                            ManagerId = 5,
                            SubordinateId = 12
                        },
                        new
                        {
                            Id = 38,
                            ManagerId = 5,
                            SubordinateId = 13
                        },
                        new
                        {
                            Id = 39,
                            ManagerId = 5,
                            SubordinateId = 14
                        },
                        new
                        {
                            Id = 40,
                            ManagerId = 5,
                            SubordinateId = 15
                        },
                        new
                        {
                            Id = 41,
                            ManagerId = 5,
                            SubordinateId = 16
                        },
                        new
                        {
                            Id = 42,
                            ManagerId = 5,
                            SubordinateId = 17
                        },
                        new
                        {
                            Id = 43,
                            ManagerId = 5,
                            SubordinateId = 18
                        },
                        new
                        {
                            Id = 44,
                            ManagerId = 5,
                            SubordinateId = 20
                        },
                        new
                        {
                            Id = 45,
                            ManagerId = 7,
                            SubordinateId = 2
                        },
                        new
                        {
                            Id = 46,
                            ManagerId = 7,
                            SubordinateId = 9
                        },
                        new
                        {
                            Id = 47,
                            ManagerId = 7,
                            SubordinateId = 11
                        },
                        new
                        {
                            Id = 48,
                            ManagerId = 7,
                            SubordinateId = 12
                        },
                        new
                        {
                            Id = 49,
                            ManagerId = 7,
                            SubordinateId = 13
                        },
                        new
                        {
                            Id = 50,
                            ManagerId = 7,
                            SubordinateId = 14
                        },
                        new
                        {
                            Id = 51,
                            ManagerId = 7,
                            SubordinateId = 15
                        },
                        new
                        {
                            Id = 52,
                            ManagerId = 7,
                            SubordinateId = 16
                        },
                        new
                        {
                            Id = 53,
                            ManagerId = 7,
                            SubordinateId = 17
                        },
                        new
                        {
                            Id = 54,
                            ManagerId = 7,
                            SubordinateId = 18
                        },
                        new
                        {
                            Id = 55,
                            ManagerId = 7,
                            SubordinateId = 20
                        },
                        new
                        {
                            Id = 56,
                            ManagerId = 8,
                            SubordinateId = 2
                        },
                        new
                        {
                            Id = 57,
                            ManagerId = 8,
                            SubordinateId = 9
                        },
                        new
                        {
                            Id = 58,
                            ManagerId = 8,
                            SubordinateId = 11
                        },
                        new
                        {
                            Id = 59,
                            ManagerId = 8,
                            SubordinateId = 12
                        },
                        new
                        {
                            Id = 60,
                            ManagerId = 8,
                            SubordinateId = 13
                        },
                        new
                        {
                            Id = 61,
                            ManagerId = 8,
                            SubordinateId = 14
                        },
                        new
                        {
                            Id = 62,
                            ManagerId = 8,
                            SubordinateId = 15
                        },
                        new
                        {
                            Id = 63,
                            ManagerId = 8,
                            SubordinateId = 16
                        },
                        new
                        {
                            Id = 64,
                            ManagerId = 8,
                            SubordinateId = 17
                        },
                        new
                        {
                            Id = 65,
                            ManagerId = 8,
                            SubordinateId = 18
                        },
                        new
                        {
                            Id = 66,
                            ManagerId = 8,
                            SubordinateId = 20
                        },
                        new
                        {
                            Id = 67,
                            ManagerId = 10,
                            SubordinateId = 2
                        },
                        new
                        {
                            Id = 68,
                            ManagerId = 10,
                            SubordinateId = 9
                        },
                        new
                        {
                            Id = 69,
                            ManagerId = 10,
                            SubordinateId = 11
                        },
                        new
                        {
                            Id = 70,
                            ManagerId = 10,
                            SubordinateId = 12
                        },
                        new
                        {
                            Id = 71,
                            ManagerId = 10,
                            SubordinateId = 13
                        },
                        new
                        {
                            Id = 72,
                            ManagerId = 10,
                            SubordinateId = 14
                        },
                        new
                        {
                            Id = 73,
                            ManagerId = 10,
                            SubordinateId = 15
                        },
                        new
                        {
                            Id = 74,
                            ManagerId = 10,
                            SubordinateId = 16
                        },
                        new
                        {
                            Id = 75,
                            ManagerId = 10,
                            SubordinateId = 17
                        },
                        new
                        {
                            Id = 76,
                            ManagerId = 10,
                            SubordinateId = 18
                        },
                        new
                        {
                            Id = 77,
                            ManagerId = 10,
                            SubordinateId = 20
                        },
                        new
                        {
                            Id = 78,
                            ManagerId = 19,
                            SubordinateId = 2
                        },
                        new
                        {
                            Id = 79,
                            ManagerId = 19,
                            SubordinateId = 9
                        },
                        new
                        {
                            Id = 80,
                            ManagerId = 19,
                            SubordinateId = 11
                        },
                        new
                        {
                            Id = 81,
                            ManagerId = 19,
                            SubordinateId = 12
                        },
                        new
                        {
                            Id = 82,
                            ManagerId = 19,
                            SubordinateId = 13
                        },
                        new
                        {
                            Id = 83,
                            ManagerId = 19,
                            SubordinateId = 14
                        },
                        new
                        {
                            Id = 84,
                            ManagerId = 19,
                            SubordinateId = 15
                        },
                        new
                        {
                            Id = 85,
                            ManagerId = 19,
                            SubordinateId = 16
                        },
                        new
                        {
                            Id = 86,
                            ManagerId = 19,
                            SubordinateId = 17
                        },
                        new
                        {
                            Id = 87,
                            ManagerId = 19,
                            SubordinateId = 18
                        },
                        new
                        {
                            Id = 88,
                            ManagerId = 19,
                            SubordinateId = 20
                        });
                });

            modelBuilder.Entity("WorkerProgect", b =>
                {
                    b.Property<int>("ProjectsListId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkersListId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectsListId", "WorkersListId");

                    b.HasIndex("WorkersListId");

                    b.ToTable("WorkerProgect", (string)null);

                    b.HasData(
                        new
                        {
                            ProjectsListId = 1,
                            WorkersListId = 1
                        },
                        new
                        {
                            ProjectsListId = 1,
                            WorkersListId = 2
                        },
                        new
                        {
                            ProjectsListId = 1,
                            WorkersListId = 9
                        },
                        new
                        {
                            ProjectsListId = 1,
                            WorkersListId = 11
                        },
                        new
                        {
                            ProjectsListId = 1,
                            WorkersListId = 12
                        },
                        new
                        {
                            ProjectsListId = 2,
                            WorkersListId = 3
                        },
                        new
                        {
                            ProjectsListId = 2,
                            WorkersListId = 13
                        },
                        new
                        {
                            ProjectsListId = 2,
                            WorkersListId = 14
                        },
                        new
                        {
                            ProjectsListId = 2,
                            WorkersListId = 15
                        },
                        new
                        {
                            ProjectsListId = 3,
                            WorkersListId = 4
                        },
                        new
                        {
                            ProjectsListId = 3,
                            WorkersListId = 16
                        },
                        new
                        {
                            ProjectsListId = 3,
                            WorkersListId = 17
                        },
                        new
                        {
                            ProjectsListId = 3,
                            WorkersListId = 18
                        },
                        new
                        {
                            ProjectsListId = 3,
                            WorkersListId = 19
                        },
                        new
                        {
                            ProjectsListId = 4,
                            WorkersListId = 5
                        },
                        new
                        {
                            ProjectsListId = 4,
                            WorkersListId = 6
                        },
                        new
                        {
                            ProjectsListId = 4,
                            WorkersListId = 20
                        },
                        new
                        {
                            ProjectsListId = 4,
                            WorkersListId = 8
                        },
                        new
                        {
                            ProjectsListId = 5,
                            WorkersListId = 7
                        },
                        new
                        {
                            ProjectsListId = 5,
                            WorkersListId = 10
                        },
                        new
                        {
                            ProjectsListId = 5,
                            WorkersListId = 11
                        },
                        new
                        {
                            ProjectsListId = 5,
                            WorkersListId = 12
                        });
                });

            modelBuilder.Entity("ProjectTag", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Progect.Projects", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Tags", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskTag", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Tags", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Task.Tasks", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskTemplateTags", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Tags", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Task.TaskTemplates", null)
                        .WithMany()
                        .HasForeignKey("TaskTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Board.BoardColumns", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Board.Boards", "Board")
                        .WithMany("BoardColumns")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Board.BoardTask", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Board.BoardColumns", null)
                        .WithMany("BoardTasks")
                        .HasForeignKey("BoardColumnsId");

                    b.HasOne("Vkr.Domain.Entities.Board.Boards", "Board")
                        .WithMany("BoardTasks")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Task.Tasks", "Task")
                        .WithMany("BoardTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Board.Boards", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Owner")
                        .WithMany("WorkerBoards")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Vkr.Domain.Entities.Progect.Projects", "Project")
                        .WithMany("BoardsProgect")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.CheckLists.ChecklistItem", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.CheckLists.Checklist", "Checklist")
                        .WithMany("Items")
                        .HasForeignKey("ChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checklist");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Files.File", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Creator")
                        .WithMany("WorkerFiles")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.History.History", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Notification.Notification", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Notification.Subscription", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Notification.WorkerNotification", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Notification.Notification", "Notification")
                        .WithMany("WorkerNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Organization.Organizations", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.ProjectChecklist", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Progect.Projects", "Project")
                        .WithMany("ProjectChecklists")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Creator")
                        .WithMany("ProjectChecklists")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.ProjectChecklistCheck", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Progect.ProjectChecklist", "ProjectChecklist")
                        .WithMany("Checks")
                        .HasForeignKey("ProjectChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectChecklist");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.ProjectLink", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Progect.Projects", "Projects")
                        .WithMany("ProjectLinks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.ProjectMemberManagement", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Progect.Projects", "Project")
                        .WithMany("ProjectMemberManagements")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Subordinate");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.ProjectStatus", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.ColorInfo", "RelatedColor")
                        .WithMany()
                        .HasForeignKey("RelatedColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedColor");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.Projects", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Organization.Organizations", "Organization")
                        .WithMany("Projects")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Progect.ProjectStatus", "ProjectStatus")
                        .WithMany("ProjectsList")
                        .HasForeignKey("ProjectStatusId");

                    b.Navigation("Manager");

                    b.Navigation("Organization");

                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Sprint.Sprints", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Progect.Projects", "Project")
                        .WithMany("Sprints")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Sprint.SprintStatus", "SprintStatus")
                        .WithMany("SprintsList")
                        .HasForeignKey("SprintStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("SprintStatus");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskExecutor", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Task.Tasks", "Task")
                        .WithMany("TaskExecutors")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Worker")
                        .WithMany("TaskExecutors")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskLink", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Task.Tasks", "Task")
                        .WithMany("TaskLinks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskMessage", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Task.Tasks", "RelatedTask")
                        .WithMany("TaskMessages")
                        .HasForeignKey("RelatedTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Sender")
                        .WithMany("WorkerMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RelatedTask");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskObserver", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Task.Tasks", "Task")
                        .WithMany("TaskObservers")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Worker")
                        .WithMany("TaskObservers")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskRelationship", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Task.Tasks", "RelatedTask")
                        .WithMany("RelatedTaskRelationships")
                        .HasForeignKey("RelatedTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Task.Tasks", "Task")
                        .WithMany("TaskRelationships")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Task.TaskRelationshipType", "RelationshipType")
                        .WithMany()
                        .HasForeignKey("TaskRelationshipTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RelatedTask");

                    b.Navigation("RelationshipType");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskTemplateLink", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Task.TaskTemplates", "TaskTemplate")
                        .WithMany("TaskTempateLinks")
                        .HasForeignKey("TaskTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskTemplate");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskTemplates", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Task.TaskPriority", "TaskPriority")
                        .WithMany("TaskTemplates")
                        .HasForeignKey("TaskPriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Vkr.Domain.Entities.Task.TaskStatus", "TaskStatus")
                        .WithMany("TaskTemplates")
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Vkr.Domain.Entities.Task.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TaskPriority");

                    b.Navigation("TaskStatus");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.Tasks", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Creator")
                        .WithMany("CreatorTasks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Task.Tasks", "ParentTask")
                        .WithMany()
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("Vkr.Domain.Entities.Progect.Projects", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Sprint.Sprints", "Sprint")
                        .WithMany("TasksList")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Vkr.Domain.Entities.Task.TaskPriority", "TaskPriority")
                        .WithMany("TasksList")
                        .HasForeignKey("TaskPriorityId");

                    b.HasOne("Vkr.Domain.Entities.Task.TaskStatus", "TaskStatus")
                        .WithMany("TasksList")
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Task.TaskType", "TaskType")
                        .WithMany("TasksList")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ParentTask");

                    b.Navigation("Project");

                    b.Navigation("Sprint");

                    b.Navigation("TaskPriority");

                    b.Navigation("TaskStatus");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Worker.WorkerPositionRelation", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Worker.WorkerPosition", "SubordinateWorkerPosition")
                        .WithMany("TaskTakerRelations")
                        .HasForeignKey("SubordinateWorkerPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Worker.WorkerPosition", "WorkerPosition")
                        .WithMany("TaskGiverRelations")
                        .HasForeignKey("WorkerPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubordinateWorkerPosition");

                    b.Navigation("WorkerPosition");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Worker.Workers", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Organization.Organizations", null)
                        .WithMany("Workers")
                        .HasForeignKey("OrganizationsId");

                    b.HasOne("Vkr.Domain.Entities.Worker.WorkerPosition", "WorkerPosition")
                        .WithMany("Workers")
                        .HasForeignKey("WorkerPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkerPosition");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Worker.WorkersManagement", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Manager")
                        .WithMany("SelfSubmissions")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", "Subordinate")
                        .WithMany("SelfManager")
                        .HasForeignKey("SubordinateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("WorkerProgect", b =>
                {
                    b.HasOne("Vkr.Domain.Entities.Progect.Projects", null)
                        .WithMany()
                        .HasForeignKey("ProjectsListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vkr.Domain.Entities.Worker.Workers", null)
                        .WithMany()
                        .HasForeignKey("WorkersListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Board.BoardColumns", b =>
                {
                    b.Navigation("BoardTasks");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Board.Boards", b =>
                {
                    b.Navigation("BoardColumns");

                    b.Navigation("BoardTasks");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.CheckLists.Checklist", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Notification.Notification", b =>
                {
                    b.Navigation("WorkerNotifications");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Organization.Organizations", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.ProjectChecklist", b =>
                {
                    b.Navigation("Checks");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.ProjectStatus", b =>
                {
                    b.Navigation("ProjectsList");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Progect.Projects", b =>
                {
                    b.Navigation("BoardsProgect");

                    b.Navigation("ProjectChecklists");

                    b.Navigation("ProjectLinks");

                    b.Navigation("ProjectMemberManagements");

                    b.Navigation("Sprints");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Sprint.SprintStatus", b =>
                {
                    b.Navigation("SprintsList");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Sprint.Sprints", b =>
                {
                    b.Navigation("TasksList");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskPriority", b =>
                {
                    b.Navigation("TaskTemplates");

                    b.Navigation("TasksList");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskStatus", b =>
                {
                    b.Navigation("TaskTemplates");

                    b.Navigation("TasksList");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskTemplates", b =>
                {
                    b.Navigation("TaskTempateLinks");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.TaskType", b =>
                {
                    b.Navigation("TasksList");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Task.Tasks", b =>
                {
                    b.Navigation("BoardTasks");

                    b.Navigation("RelatedTaskRelationships");

                    b.Navigation("TaskExecutors");

                    b.Navigation("TaskLinks");

                    b.Navigation("TaskMessages");

                    b.Navigation("TaskObservers");

                    b.Navigation("TaskRelationships");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Worker.WorkerPosition", b =>
                {
                    b.Navigation("TaskGiverRelations");

                    b.Navigation("TaskTakerRelations");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("Vkr.Domain.Entities.Worker.Workers", b =>
                {
                    b.Navigation("CreatorTasks");

                    b.Navigation("ProjectChecklists");

                    b.Navigation("SelfManager");

                    b.Navigation("SelfSubmissions");

                    b.Navigation("TaskExecutors");

                    b.Navigation("TaskObservers");

                    b.Navigation("WorkerBoards");

                    b.Navigation("WorkerFiles");

                    b.Navigation("WorkerMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
